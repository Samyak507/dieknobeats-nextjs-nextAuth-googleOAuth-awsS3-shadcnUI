// index.js - Updated with session-based admin authentication and 5-minute expiration
require('dotenv').config();
const express = require("express");
const next = require("next");
const path = require("path");
const session = require("express-session"); // Import express-session

const dev = process.env.NODE_ENV !== "production";
const app = next({ dev, dir: "./src" });
const handle = app.getRequestHandler();

// Define the form data parser once to reuse it
const urlencodedParser = express.urlencoded({ extended: true });

app.prepare().then(() => {
Â  const server = express();

Â  // EJS setup
Â  server.set("view engine", "ejs");
Â  server.set("views", path.join(__dirname, "views"));

Â  // Apply the JSON parser for Next.js API routes
Â  server.use(express.json());

Â  // Session middleware setup
Â  server.use(session({
Â  Â  secret: process.env.SESSION_SECRET || 'a-very-secret-key-for-admin', // It's best to use an environment variable
Â  Â  resave: false,
Â  Â  saveUninitialized: true,
Â  Â  rolling: true, // <-- ADDED: Resets the cookie expiration on every request
Â  Â  cookie: { 
Â  Â  Â  secure: dev ? false : true, // Use secure cookies in production
Â  Â  Â  maxAge: 5 * 60 * 1000 // <-- ADDED: 5 minutes in milliseconds
Â  Â  } 
Â  }));

Â  // Middleware to check if the admin is logged in
Â  const isAdmin = (req, res, next) => {
Â  Â  if (req.session.isAdmin) {
Â  Â  Â  return next(); // If logged in, proceed to the route
Â  Â  }
Â  Â  // If not logged in, redirect to the login page
Â  Â  res.redirect("/admin/login");
Â  };

Â  // --- Admin Panel Routes ---

Â  // Page to display the login form
Â  server.get("/admin/login", (req, res) => {
Â  Â  res.render("login", { error: null });
Â  });

Â  // Handle the login form submission
Â  server.post("/admin/login", urlencodedParser, (req, res) => {
Â  Â  const { username, password } = req.body;

Â  Â  // Check for the correct username and password
Â  Â  if (username === "dieknobeats@next.com" && password === "123456789") {
Â  Â  Â  req.session.isAdmin = true; // Set a session variable to mark as logged in
Â  Â  Â  res.redirect("/admin/course");
Â  Â  } else {
Â  Â  Â  res.render("login", { error: "Invalid username or password." });
Â  Â  }
Â  });

Â  // Apply the 'isAdmin' middleware to protect these routes
Â  server.get("/admin/course", isAdmin, (req, res) => {
Â  Â  res.render("course");
Â  });

Â  server.get("/admin/video", isAdmin, (req, res) => {
Â  Â  res.render("video");
Â  });
Â  
Â  // --- Next.js Handler ---

Â  // Let Next.js handle all other requests
Â  server.all(/.*/, (req, res) => {
Â  Â  return handle(req, res);
Â  });

Â  const PORT = process.env.PORT || 3000;
Â  server.listen(PORT, (err) => {
Â  Â  if (err) throw err;
Â  Â  console.log(`ðŸš€ Server running at http://localhost:${PORT}`);
Â  Â  console.log(`ðŸ‘¤ Admin panel: http://localhost:${PORT}/admin/login`);
Â  });
}).catch((ex) => {
Â  console.error('Failed to start server:', ex);
Â  process.exit(1);
});